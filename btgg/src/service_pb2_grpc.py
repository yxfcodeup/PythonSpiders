# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities

import service_pb2 as service__pb2


class ConnectionServiceStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.getCon = channel.unary_unary(
        '/ConnectionService/getCon',
        request_serializer=service__pb2.conRequest.SerializeToString,
        response_deserializer=service__pb2.conReply.FromString,
        )


class ConnectionServiceServicer(object):

  def getCon(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ConnectionServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'getCon': grpc.unary_unary_rpc_method_handler(
          servicer.getCon,
          request_deserializer=service__pb2.conRequest.FromString,
          response_serializer=service__pb2.conReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'ConnectionService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class DetectorServiceStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.detectSlave = channel.unary_unary(
        '/DetectorService/detectSlave',
        request_serializer=service__pb2.deRequest.SerializeToString,
        response_deserializer=service__pb2.deReply.FromString,
        )


class DetectorServiceServicer(object):

  def detectSlave(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_DetectorServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'detectSlave': grpc.unary_unary_rpc_method_handler(
          servicer.detectSlave,
          request_deserializer=service__pb2.deRequest.FromString,
          response_serializer=service__pb2.deReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'DetectorService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class TaskServiceStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.sendTask = channel.unary_unary(
        '/TaskService/sendTask',
        request_serializer=service__pb2.tRequest.SerializeToString,
        response_deserializer=service__pb2.tReply.FromString,
        )


class TaskServiceServicer(object):

  def sendTask(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_TaskServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'sendTask': grpc.unary_unary_rpc_method_handler(
          servicer.sendTask,
          request_deserializer=service__pb2.tRequest.FromString,
          response_serializer=service__pb2.tReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'TaskService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
