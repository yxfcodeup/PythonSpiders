# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: service.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='service.proto',
  package='',
  syntax='proto3',
  serialized_pb=_b('\n\rservice.proto\"\x19\n\nconRequest\x12\x0b\n\x03req\x18\x01 \x01(\t\"\x1b\n\x08\x63onReply\x12\x0f\n\x07\x61llowed\x18\x01 \x01(\t\"\x18\n\tdeRequest\x12\x0b\n\x03req\x18\x01 \x01(\t\" \n\x07\x64\x65Reply\x12\x15\n\rmaster_status\x18\x01 \x01(\t\"V\n\x08tRequest\x12\x0b\n\x03req\x18\x01 \x01(\t\x12\x13\n\x0breturn_task\x18\x02 \x01(\t\x12\x13\n\x0breturn_json\x18\x03 \x01(\t\x12\x13\n\x0bremark_json\x18\x04 \x01(\t\"(\n\x06tReply\x12\x0b\n\x03rep\x18\x01 \x01(\t\x12\x11\n\ttask_info\x18\x02 \x01(\t27\n\x11\x43onnectionService\x12\"\n\x06getCon\x12\x0b.conRequest\x1a\t.conReply\"\x00\x32\x38\n\x0f\x44\x65tectorService\x12%\n\x0b\x64\x65tectSlave\x12\n.deRequest\x1a\x08.deReply\"\x00\x32/\n\x0bTaskService\x12 \n\x08sendTask\x12\t.tRequest\x1a\x07.tReply\"\x00\x62\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_CONREQUEST = _descriptor.Descriptor(
  name='conRequest',
  full_name='conRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='req', full_name='conRequest.req', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=17,
  serialized_end=42,
)


_CONREPLY = _descriptor.Descriptor(
  name='conReply',
  full_name='conReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='allowed', full_name='conReply.allowed', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=44,
  serialized_end=71,
)


_DEREQUEST = _descriptor.Descriptor(
  name='deRequest',
  full_name='deRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='req', full_name='deRequest.req', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=73,
  serialized_end=97,
)


_DEREPLY = _descriptor.Descriptor(
  name='deReply',
  full_name='deReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='master_status', full_name='deReply.master_status', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=99,
  serialized_end=131,
)


_TREQUEST = _descriptor.Descriptor(
  name='tRequest',
  full_name='tRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='req', full_name='tRequest.req', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='return_task', full_name='tRequest.return_task', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='return_json', full_name='tRequest.return_json', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='remark_json', full_name='tRequest.remark_json', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=133,
  serialized_end=219,
)


_TREPLY = _descriptor.Descriptor(
  name='tReply',
  full_name='tReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='rep', full_name='tReply.rep', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='task_info', full_name='tReply.task_info', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=221,
  serialized_end=261,
)

DESCRIPTOR.message_types_by_name['conRequest'] = _CONREQUEST
DESCRIPTOR.message_types_by_name['conReply'] = _CONREPLY
DESCRIPTOR.message_types_by_name['deRequest'] = _DEREQUEST
DESCRIPTOR.message_types_by_name['deReply'] = _DEREPLY
DESCRIPTOR.message_types_by_name['tRequest'] = _TREQUEST
DESCRIPTOR.message_types_by_name['tReply'] = _TREPLY

conRequest = _reflection.GeneratedProtocolMessageType('conRequest', (_message.Message,), dict(
  DESCRIPTOR = _CONREQUEST,
  __module__ = 'service_pb2'
  # @@protoc_insertion_point(class_scope:conRequest)
  ))
_sym_db.RegisterMessage(conRequest)

conReply = _reflection.GeneratedProtocolMessageType('conReply', (_message.Message,), dict(
  DESCRIPTOR = _CONREPLY,
  __module__ = 'service_pb2'
  # @@protoc_insertion_point(class_scope:conReply)
  ))
_sym_db.RegisterMessage(conReply)

deRequest = _reflection.GeneratedProtocolMessageType('deRequest', (_message.Message,), dict(
  DESCRIPTOR = _DEREQUEST,
  __module__ = 'service_pb2'
  # @@protoc_insertion_point(class_scope:deRequest)
  ))
_sym_db.RegisterMessage(deRequest)

deReply = _reflection.GeneratedProtocolMessageType('deReply', (_message.Message,), dict(
  DESCRIPTOR = _DEREPLY,
  __module__ = 'service_pb2'
  # @@protoc_insertion_point(class_scope:deReply)
  ))
_sym_db.RegisterMessage(deReply)

tRequest = _reflection.GeneratedProtocolMessageType('tRequest', (_message.Message,), dict(
  DESCRIPTOR = _TREQUEST,
  __module__ = 'service_pb2'
  # @@protoc_insertion_point(class_scope:tRequest)
  ))
_sym_db.RegisterMessage(tRequest)

tReply = _reflection.GeneratedProtocolMessageType('tReply', (_message.Message,), dict(
  DESCRIPTOR = _TREPLY,
  __module__ = 'service_pb2'
  # @@protoc_insertion_point(class_scope:tReply)
  ))
_sym_db.RegisterMessage(tReply)


import grpc
from grpc.beta import implementations as beta_implementations
from grpc.beta import interfaces as beta_interfaces
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities


class ConnectionServiceStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.getCon = channel.unary_unary(
        '/ConnectionService/getCon',
        request_serializer=conRequest.SerializeToString,
        response_deserializer=conReply.FromString,
        )


class ConnectionServiceServicer(object):

  def getCon(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ConnectionServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'getCon': grpc.unary_unary_rpc_method_handler(
          servicer.getCon,
          request_deserializer=conRequest.FromString,
          response_serializer=conReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'ConnectionService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class BetaConnectionServiceServicer(object):
  def getCon(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


class BetaConnectionServiceStub(object):
  def getCon(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  getCon.future = None


def beta_create_ConnectionService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  request_deserializers = {
    ('ConnectionService', 'getCon'): conRequest.FromString,
  }
  response_serializers = {
    ('ConnectionService', 'getCon'): conReply.SerializeToString,
  }
  method_implementations = {
    ('ConnectionService', 'getCon'): face_utilities.unary_unary_inline(servicer.getCon),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)


def beta_create_ConnectionService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  request_serializers = {
    ('ConnectionService', 'getCon'): conRequest.SerializeToString,
  }
  response_deserializers = {
    ('ConnectionService', 'getCon'): conReply.FromString,
  }
  cardinalities = {
    'getCon': cardinality.Cardinality.UNARY_UNARY,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'ConnectionService', cardinalities, options=stub_options)


class DetectorServiceStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.detectSlave = channel.unary_unary(
        '/DetectorService/detectSlave',
        request_serializer=deRequest.SerializeToString,
        response_deserializer=deReply.FromString,
        )


class DetectorServiceServicer(object):

  def detectSlave(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_DetectorServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'detectSlave': grpc.unary_unary_rpc_method_handler(
          servicer.detectSlave,
          request_deserializer=deRequest.FromString,
          response_serializer=deReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'DetectorService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class BetaDetectorServiceServicer(object):
  def detectSlave(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


class BetaDetectorServiceStub(object):
  def detectSlave(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  detectSlave.future = None


def beta_create_DetectorService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  request_deserializers = {
    ('DetectorService', 'detectSlave'): deRequest.FromString,
  }
  response_serializers = {
    ('DetectorService', 'detectSlave'): deReply.SerializeToString,
  }
  method_implementations = {
    ('DetectorService', 'detectSlave'): face_utilities.unary_unary_inline(servicer.detectSlave),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)


def beta_create_DetectorService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  request_serializers = {
    ('DetectorService', 'detectSlave'): deRequest.SerializeToString,
  }
  response_deserializers = {
    ('DetectorService', 'detectSlave'): deReply.FromString,
  }
  cardinalities = {
    'detectSlave': cardinality.Cardinality.UNARY_UNARY,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'DetectorService', cardinalities, options=stub_options)


class TaskServiceStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.sendTask = channel.unary_unary(
        '/TaskService/sendTask',
        request_serializer=tRequest.SerializeToString,
        response_deserializer=tReply.FromString,
        )


class TaskServiceServicer(object):

  def sendTask(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_TaskServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'sendTask': grpc.unary_unary_rpc_method_handler(
          servicer.sendTask,
          request_deserializer=tRequest.FromString,
          response_serializer=tReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'TaskService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class BetaTaskServiceServicer(object):
  def sendTask(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


class BetaTaskServiceStub(object):
  def sendTask(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  sendTask.future = None


def beta_create_TaskService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  request_deserializers = {
    ('TaskService', 'sendTask'): tRequest.FromString,
  }
  response_serializers = {
    ('TaskService', 'sendTask'): tReply.SerializeToString,
  }
  method_implementations = {
    ('TaskService', 'sendTask'): face_utilities.unary_unary_inline(servicer.sendTask),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)


def beta_create_TaskService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  request_serializers = {
    ('TaskService', 'sendTask'): tRequest.SerializeToString,
  }
  response_deserializers = {
    ('TaskService', 'sendTask'): tReply.FromString,
  }
  cardinalities = {
    'sendTask': cardinality.Cardinality.UNARY_UNARY,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'TaskService', cardinalities, options=stub_options)
# @@protoc_insertion_point(module_scope)
